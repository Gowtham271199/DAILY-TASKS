1.) //question : https://github.com/rvsp/typescript-oops/blob/master/Practice/Movie.md


class Movie {
  constructor(title, studio, rating) {
    this.title = title;
    this.studio = studio;
    this.rating = rating;
  }

  displayDetails() {
    console.log("Title:", this.title);
    console.log("Studio:", this.studio);
    console.log("Rating:", this.rating);
  }
}

// Create an instance of Movie
const movie = new Movie("Casino Royale", "Eon Productions", "PG-13");

// Display movie details
movie.displayDetails();

2.)
//question :https://github.com/rvsp/typescript-oops/blob/master/Practice/class-circle.md

var Circle =  (function () {
    function Circle(radius, color) {
        this.radius = 1.0;
        this.color = "Red";
        if (typeof (radius) !== "undefined") {
            this.radius = radius;
        }
        if (typeof (color) !== "undefined") {
            this.color = color;
        }
    }
    Circle.prototype.getRadius = function () {
        return this.radius;
    };
    Circle.prototype.setRadius = function (radius) {
        this.radius = radius;
    };
    Circle.prototype.getColor = function () {
        return this.color;
    };
    Circle.prototype.setColor = function (color) {
        this.color = color;
    };
    Circle.prototype.toString = function () {
        return "Radius: " + this.radius + " Color: " + this.color;
    };
    Circle.prototype.getArea = function () {
        return (2 * (Math.PI) * this.radius);
    };
    Circle.prototype.getCircumference = function () {
        return (2 * this.radius);
    };
    return Circle;
}());
var c1 = new Circle();
console.log("Constructor with no params: " + c1.toString());
var c2 = new Circle(3.5);
console.log("Constructor with one param: " + c2.toString());
var c3 = new Circle(2.2, 'Yellow');
console.log("getRadius: " + c3.getRadius());
c3.setRadius(3.3);
console.log("Radius value after setRadius: " + c3.getRadius());
console.log("getColor: " + c3.getColor());
c3.setColor("Blue");
console.log("Color Value after setColor: " + c3.getColor());
console.log(c3.toString());
console.log("Area: " + c3.getArea().toFixed(2));
console.log("Circumference: " + c3.getCircumference());

3.)Write a “person” class to hold all the details:


class Person{
constructor(name,age, gender,DOB, address){
this.name = name;
this.age = age;
this.gender = gender;
this.DOB = DOB;
this.address = address;
}
//method name here we call its as method as function
getname(){
return "NAME :"+ this.name;
}
getage(){
return "AGE :"+ this.age;
}
getgender(){
return "GENDER :"+ this.gender;
}
getDOB(){
return "DOB :"+ this.DOB;
}
getaddress(){
return "ADDRESS :"+ this.address;
}
}

var GT = new Person("GOWTHAM", 24,"MALE",1999,"1/256 A MPR STREET AVINASHI");
console.log(GT.getname());
console.log(GT.getage());
console.log(GT.getgender());
console.log(GT.getDOB());
console.log(GT.getaddress());


4.) write a class to calculate the uber price:


class UberCalculator {
  constructor(distance, duration) {
    this.distance = distance;
    this.duration = duration;
  }

  calculatePrice() {
    const baseFare = 5;
    const costPerMile = 10;
    const costPerMinute = 1;

    const totalCost = baseFare + (costPerMile * this.distance) + (costPerMinute * this.duration);
    return totalCost.toFixed(2);
  }
}

// Example usage:
const distanceInMiles = 10;  // Distance in miles
const durationInMinutes = 25;  // Duration in minutes

const uberRide = new UberCalculator(distanceInMiles, durationInMinutes);
const price = uberRide.calculatePrice();

console.log("Uber Price Rs:" + price);
